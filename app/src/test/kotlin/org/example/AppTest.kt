/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import kotlin.test.Test
import kotlin.test.assertNotNull
import kotlin.test.*
import java.io.File

class AppTest {
    @Test
    fun testParse() {
        var p = ParsedInput("cat")
        assertEquals("cat", p.command)
        assert(p.flags.isEmpty())
        assert(p.arguments.isEmpty())

        p = ParsedInput("cat -abcd")
        assertEquals("cat", p.command)
        assertTrue(p.flags.contentEquals(charArrayOf('a', 'b', 'c', 'd')))
        assert(p.arguments.isEmpty())

        p = ParsedInput("cat flake.nix run.sh")
        assertEquals("cat", p.command)
        assert(p.flags.isEmpty())
        assertTrue(p.arguments.contentEquals(arrayOf("flake.nix", "run.sh")))

        p = ParsedInput("cat -abcd flake.nix run.sh")
        assertEquals("cat", p.command)
        assertTrue(p.flags.contentEquals(charArrayOf('a', 'b', 'c', 'd')))
        assertTrue(p.arguments.contentEquals(arrayOf("flake.nix", "run.sh")))
    }

    @Test
    fun testCat() {
        var cwd = System.getProperty("user.dir")
        //println(cwd)
        val p = ParsedInput("cat ../run.sh")
        val (_, output) = ShellFunctions().cat(cwd, p)

        val expectedFile = File("../run.sh")
        val expectedText = expectedFile.readText()

        assertEquals(expectedText, output)
    }
}
